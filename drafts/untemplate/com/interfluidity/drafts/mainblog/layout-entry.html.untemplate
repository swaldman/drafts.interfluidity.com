import java.time.format.DateTimeFormatter
import com.interfluidity.drafts.DraftsSite
import unstatic.PageBase
import unstatic.ztapir.simple.Attribute.Key

> val PubDateFormatter = DateTimeFormatter.ofPattern("""'['yyyy'-'MM'-'dd' @ 'hh':'mm' 'a' 'zzz']'""").withZone(java.time.ZoneId.systemDefault())

val presentationTypeClass =
  s"presentation-${input.presentation.toString().toLowerCase}"

val resolved = input.sourceEntry
val ut = resolved.entryUntemplate
val permalink = resolved.permalink
val entryAnchor = Key.`Anchor`.caseInsensitiveCheck(ut)
val articleClasses = presentationTypeClass + entryAnchor.fold("")(anchor => "uid-" + anchor)
val mbTitle  = resolved.entryInfo.mbTitle
val authors = resolved.entryInfo.authors
val authorsString =
  authors.size match
    case 0 => "anonymous"
    case 1 => authors.head
    case 2 => authors.mkString(" and ")
    case sz =>
      val (init, last) =
        authors.splitAt(sz-1)
      init.mkString(", ", ", ", "") + last.head
val pubDate = Key.`PubDate`.caseInsensitiveCheck(ut).getOrElse( throw new Exception("Attribute PubDate required, not found: " + resolved) )
val timestamp = PubDateFormatter.format(pubDate)

given PageBase = PageBase.fromPage(input.renderLocation)

(input : DraftsSite.MainBlog.Layout.Input.Entry)[]~()>
      <article class="<(articleClasses)>">
        <div class="entry-header">
<()
  mbTitle.fold("&nbsp;") { title =>
()>
          <h1><a href="<( permalink.relative )>"><( title )></a></h1>
<()
  }
()>
        </div>
        <div class="entry-body">
          <( input.articleContentHtml )>
        </div>
        <div class="entry-footer">
          <a href="<( permalink.relative )>">draft</a> by <b><( authorsString )></b><br/><( timestamp )>
        </div>
      </article>

